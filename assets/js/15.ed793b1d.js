(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{522:function(s,t,a){"use strict";a.r(t);var n=a(6),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"js简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js简介"}},[s._v("#")]),s._v(" JS简介")]),s._v(" "),a("p",[s._v("一个完整的 JavaScript 程序实现由三个不同的部分组成：")]),s._v(" "),a("ul",[a("li",[s._v("核心（ECMAScript）")]),s._v(" "),a("li",[s._v("文档对象模型（DOM）")]),s._v(" "),a("li",[s._v("浏览器对象模型（BOM）")])]),s._v(" "),a("h3",{attrs:{id:"ecmascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript"}},[s._v("#")]),s._v(" ECMAScript")]),s._v(" "),a("p",[s._v("web浏览器只是ECMAScrit实现可能的"),a("strong",[s._v("宿主环境之一")]),s._v("。")]),s._v(" "),a("p",[s._v("ECMA-262标准没有参照web浏览器，规定了这门语言的下列组成部分：语法、类型、语句、关键字、保留字、操作符、对象。")]),s._v(" "),a("h3",{attrs:{id:"dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[s._v("#")]),s._v(" DOM")]),s._v(" "),a("p",[s._v("DOM把整个页面映射为一个多层节点结构")]),s._v(" "),a("h3",{attrs:{id:"bom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bom"}},[s._v("#")]),s._v(" BOM")]),s._v(" "),a("p",[s._v("从根本上讲，BOM只处理浏览器窗口和框架。但人们也习惯上把所有针对浏览器的JS扩展算作BOM的一部分。")]),s._v(" "),a("p",[s._v("这些扩展包括：")]),s._v(" "),a("ul",[a("li",[s._v("弹出新浏览器窗口的功能")]),s._v(" "),a("li",[s._v("移动、缩放和关闭浏览器窗口的功能")]),s._v(" "),a("li",[s._v("提供浏览器详细信息的navigator对象")]),s._v(" "),a("li",[s._v("提供浏览器加载页面的详细信息的location对象")]),s._v(" "),a("li",[s._v("提供用户显示器分辨率详细信息的screen对象")]),s._v(" "),a("li",[s._v("对cookies的支持")]),s._v(" "),a("li",[s._v("像XMLHttpRequest和IE的ActiveXObject这样的自定义对象")])]),s._v(" "),a("h2",{attrs:{id:"在html中使用javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在html中使用javascript"}},[s._v("#")]),s._v(" 在HTML中使用JavaScript")]),s._v(" "),a("h3",{attrs:{id:"script元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script元素"}},[s._v("#")]),s._v(" script元素")]),s._v(" "),a("p",[s._v("为了避免延迟，现代Web应用程序一般都把全部Js引用放在")]),a("body",[s._v("元素中页面内容的后面。"),a("p"),s._v(" "),a("h4",{attrs:{id:"延迟脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延迟脚本"}},[s._v("#")]),s._v(" 延迟脚本")]),s._v(" "),a("p",[s._v("defer属性会让脚本被延迟到整个页面都解析完毕再运行。")]),s._v(" "),a("h4",{attrs:{id:"异步脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步脚本"}},[s._v("#")]),s._v(" 异步脚本")]),s._v(" "),a("p",[s._v("async元素告诉浏览器立即下载文件，与defer不同的是，标记为async的脚本不能保证按照指定他们的先后顺序来执行。")]),s._v(" "),a("h3",{attrs:{id:"外部文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外部文件"}},[s._v("#")]),s._v(" 外部文件")]),s._v(" "),a("p",[s._v("使用外部文件有如下优点：")]),s._v(" "),a("ul",[a("li",[s._v("可维护性")]),s._v(" "),a("li",[s._v("可缓存")]),s._v(" "),a("li",[s._v("适应未来")])]),s._v(" "),a("h3",{attrs:{id:"noscript元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#noscript元素"}},[s._v("#")]),s._v(" noscript元素")]),s._v(" "),a("p",[s._v("使用noscript元素可以指定在不支持脚本的浏览器中显示的替代内容。但在启用了脚本的情况下，浏览器不会显示noscript元素中的任何内容。")]),s._v(" "),a("p",[s._v("##　基本概念")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("ECMA中的一切都区分大小写。")])]),s._v(" "),a("li",[a("p",[s._v("虽然语句结尾的分号不是必须的，但是建议任何时候都不要省略。")])])]),s._v(" "),a("h3",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),a("p",[s._v("虽然不建议修改变量所保存值的类型，但是这种操作完全有效。")]),s._v(" "),a("p",[s._v("用var操作符定义的变量将成为定义该变量的作用域中的局部变量。也就是说，在函数值中var定义一个变量，那么这个变量在函数退出后就会销毁。")]),s._v(" "),a("p",[s._v("可以使用一条语句定义多个变量，需要像下面这样把每个变量用逗号分开即可")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\tfound "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\tage "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"number类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number类型"}},[s._v("#")]),s._v(" Number类型")]),s._v(" "),a("h4",{attrs:{id:"浮点数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[s._v("#")]),s._v(" 浮点数")]),s._v(" "),a("p",[s._v("由于保存浮点数值需要的内存空间是保存整数值的两倍，因此ECMAscript会不失时机地将浮点数值转换成整数值。")]),s._v(" "),a("p",[s._v("ECMAScript能表示的最大数----最小数：1.7976....e+308 ---------5e-324")]),s._v(" "),a("h4",{attrs:{id:"nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan"}},[s._v("#")]),s._v(" NaN")]),s._v(" "),a("p",[s._v("NaN为非数值，任何数值除以非数值都会返回NaN，因此不会影响到其它代码的执行。")]),s._v(" "),a("p",[s._v("NaN和任何值都不对等，包括它本身。")]),s._v(" "),a("h4",{attrs:{id:"数值转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值转换"}},[s._v("#")]),s._v(" 数值转换")]),s._v(" "),a("ul",[a("li",[s._v("Number()\n"),a("ul",[a("li",[s._v("false、true将分别被转换为0和1")]),s._v(" "),a("li",[s._v("null会返回0")]),s._v(" "),a("li",[s._v("如果是对象，则调用对象的valueof()方法，然后依照前面的规则转换为相应的值。")]),s._v(" "),a("li",[s._v("如果转换的结果是NaN，则调用对象的toString()方法，然后依照前面的规则转换返回的字符串")])])]),s._v(" "),a("li",[s._v("parseInt()")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//22")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//123")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//为了避免进制转换的问题，所以为这个函数提供第二个参数：转换时使用的基数（即多少进制）")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("parseFloat()")])]),s._v(" "),a("h3",{attrs:{id:"string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string类型"}},[s._v("#")]),s._v(" String类型")]),s._v(" "),a("p",[s._v("字符串可以由双引号或单引号表示")]),s._v(" "),a("p",[s._v("数个字符长的转义序列表示一个字符")]),s._v(" "),a("h3",{attrs:{id:"语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[s._v("#")]),s._v(" 语句")]),s._v(" "),a("h4",{attrs:{id:"label语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#label语句"}},[s._v("#")]),s._v(" label语句")]),s._v(" "),a("p",[s._v("使用label语句可以在代码中添加标签，以便将来使用。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("label"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" statement\nstart"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("｛\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n｝\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("标签可以在将来由break或continue语句引用，加标签的语句一般都要与for语句等循环语句配合使用。")]),s._v(" "),a("h4",{attrs:{id:"with语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#with语句"}},[s._v("#")]),s._v(" with语句")]),s._v(" "),a("p",[s._v("with语句的作用是将代码的作用域设置到一个特定的对象中。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("定义"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v("语句的目的是为了简化多次编写同一个对象的工作\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" qs "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("seacrh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("subString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" hostName "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hostName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("href"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n如果用"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v("语句写，可直接编写为\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" qs "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" seacrh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("subString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" hostName "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hostName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" href"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"变量、作用域和内存问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量、作用域和内存问题"}},[s._v("#")]),s._v(" 变量、作用域和内存问题")]),s._v(" "),a("h3",{attrs:{id:"基本类型值和引用类型值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型值和引用类型值"}},[s._v("#")]),s._v(" 基本类型值和引用类型值")]),s._v(" "),a("p",[s._v("ECMA变量可能包含两种不同数据类型的值："),a("strong",[s._v("基本类型值")]),s._v("和"),a("strong",[s._v("引用类型值")]),s._v("。基本类型值，指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。")]),s._v(" "),a("p",[s._v("JavaScript不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上时操作对象的引用而不是实际的对象，因此，引用类型的值是按引用访问的。")]),s._v(" "),a("p",[s._v("可以把ECMAscript函数的参数想象成局部变量。")]),s._v(" "),a("h4",{attrs:{id:"检测类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检测类型"}},[s._v("#")]),s._v(" 检测类型")]),s._v(" "),a("p",[s._v("检测基本类型用typeof操作符，如果变量的值是一个对象或者null，则typeof操作符会像下面的例子中那样返回“object”。")]),s._v(" "),a("p",[s._v("检测引用类型时用 instanceof 操作符，可以检测出某个值是什么类型的对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("alert(person instanceof Object) //变量person是Object吗？\nalert(colors instanceof Array)  //变量colors是Array吗？\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("ECMA-262规定任何在内部实现 [[Call]] 方法的对象都应该在应用 typeof 操作符时返回“function ”。由于chrome7之前版本及safari5之前版本中的正则表达式也实现了这个方法。因此对正则表达式应用typeof会返回“function”。")])]),s._v(" "),a("h3",{attrs:{id:"执行环境及作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行环境及作用域"}},[s._v("#")]),s._v(" 执行环境及作用域")]),s._v(" "),a("p",[s._v("执行环境定义了变量或函数有权访问的其他数据，决定了他们各自的行为。每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中。")]),s._v(" "),a("p",[s._v("每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。")]),s._v(" "),a("p",[s._v("当代码在一个环境执行时，会创建变量对象一个"),a("strong",[s._v("作用域链")]),s._v("。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序执行。作用域链的前端始终是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象作为变量对象。")]),s._v(" "),a("p",[s._v("标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直到找到标识符为止。")]),s._v(" "),a("p",[s._v("内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。这些环境之间的联系是线性、有次序的。")]),s._v(" "),a("h4",{attrs:{id:"延长作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延长作用域链"}},[s._v("#")]),s._v(" 延长作用域链")]),s._v(" "),a("p",[s._v("当执行流进入下列任何一个语句中，作用域链就会得到延长。")]),s._v(" "),a("ul",[a("li",[s._v("try-catch语句中的catch块")]),s._v(" "),a("li",[s._v("with语句")])]),s._v(" "),a("h4",{attrs:{id:"没有块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#没有块级作用域"}},[s._v("#")]),s._v(" 没有块级作用域")]),s._v(" "),a("p",[s._v("对于JS来说，由for语句或其它语句创建的变量即使在for循环执行结束后，也依旧存在于循环外部的执行环境中。")]),s._v(" "),a("blockquote",[a("p",[s._v("很明显，访问局部变量要比访问全局变量更快，因为不用向上搜索作用域链。JavaScript引擎在优化标识符查询方面做得不错，所以在将来这个差别几乎可以忽略不计。")])]),s._v(" "),a("h3",{attrs:{id:"垃圾清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾清除"}},[s._v("#")]),s._v(" 垃圾清除")]),s._v(" "),a("p",[s._v("在编写JavaScript程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。这种垃圾收集机制的原理很简单：找出那些不再使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。")]),s._v(" "),a("p",[s._v("用于标识无用变量的策略可能会因实现而异，但具体到浏览器中的实现，则通常有两种策略：")]),s._v(" "),a("h4",{attrs:{id:"标记清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[s._v("#")]),s._v(" 标记清除")]),s._v(" "),a("p",[s._v("垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，他会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。")]),s._v(" "),a("blockquote",[a("p",[s._v("到08年为止，ie、Firefox、opera、chrome、safari、的JavaScript实现使用的都是标记清除式的垃圾收集策略（或类似的策略），只不过垃圾收集的时间间隔不同。")])]),s._v(" "),a("h4",{attrs:{id:"引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[s._v("#")]),s._v(" 引用计数")]),s._v(" "),a("p",[s._v("引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋值该变量时，则这个值的引用次数就是1.如果同一个值又被赋给另外一个变量，则该值得引用次数加1。相反，如果包含对这个值引用的变量又取 得了另外一个值，则这个值的引用次数减 1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那 些引用次数为零的值所占用的内存。")]),s._v(" "),a("p",[s._v("但有一个严重的问题：循环引用")]),s._v(" "),a("h4",{attrs:{id:"管理内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理内存"}},[s._v("#")]),s._v(" 管理内存")]),s._v(" "),a("p",[s._v("JavaScript在进行内存管理和垃圾收集时面临的最主要问题就是分配给web浏览器的可用内存数量通常要比分配给桌面应用程序的少。这样做主要是出于安全方面的考虑，目的是防止运行JavaScript的网页耗尽全部系统内存而导致系统崩溃。内存限制问题不仅会影响给变量分配内存，同时还会影响调用栈以及在一个线程中能够执行的语句数量。")]),s._v(" "),a("p",[s._v("优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为null来释放其引用——这个做法叫"),a("strong",[s._v("解除引用")]),s._v("。")]),s._v(" "),a("blockquote",[a("p",[s._v("解除一个值的引用并不意味着自动回收该值所占用的内存，解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行的时候将其回收。")])]),s._v(" "),a("h2",{attrs:{id:"引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[s._v("#")]),s._v(" 引用类型")]),s._v(" "),a("p",[s._v("引用类型的值（对象）是引用类型的一个实例。在ECMAscript中，引用类型是一种数据结构，用于将数据和功能组织在一起。")]),s._v(" "),a("h3",{attrs:{id:"object类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object类型"}},[s._v("#")]),s._v(" object类型")]),s._v(" "),a("p",[s._v("对于在应用程序中存储和传输数据而言，object确实是非常理想的选择。")]),s._v(" "),a("p",[s._v("创建object实例有两种方式：")]),s._v(" "),a("ul",[a("li",[s._v("new操作符后跟object构造函数")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\nname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"BIC"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\nage"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("对象字面量表示法")])]),s._v(" "),a("p",[s._v("在使用对象字面量语法时，如果留空其花括号，则可以定义只包含默认属性和方法的对象")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//和new object()一样")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("blockquote",[a("p",[s._v("在函数内部，我们可通过typeof操作符来检测每个属性是否存在")])]),s._v(" "),a("h5",{attrs:{id:"方括号表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方括号表示法"}},[s._v("#")]),s._v(" 方括号表示法")]),s._v(" "),a("p",[s._v("一般来说，访问对象属性时使用的都是点表示法，但是也可以用方括号表示法来访问对象的属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("alert(person['name'])\nalert(person.name)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("方括号主要的优势是可以通过变量来访问属性，如果属性名中包含可以导致语法错误的字符，或属性名使用的是关键字或保留字，也可以使用方括号表示法。通常，除非使用变量来访问属性，否则使用点表示法。")]),s._v(" "),a("p",[s._v("$$\nasd\n$$")]),s._v(" "),a("h3",{attrs:{id:"array类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array类型"}},[s._v("#")]),s._v(" Array类型")]),s._v(" "),a("p",[s._v("虽然ECMAScript数组与其他语言中的数组都是数据的有序列表，但与其他语言不同的是，ECMAScript数组的每一项可以保存任何类型的数据。而且数组的大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。")]),s._v(" "),a("p",[s._v("创建数组的基本方式有两种：")]),s._v(" "),a("ul",[a("li",[s._v("使用Array构造函数")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" color "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("使用数组字面量表示法")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"red"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#length"}},[s._v("#")]),s._v(" length")]),s._v(" "),a("p",[s._v("数组的length属性很有特点——他不是只读的，利用length属性可以很方便地在数组末尾添加新项。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"red"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncolors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"black"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在位置2添加一种颜色")]),s._v("\ncolors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"green"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在位置3添加一种颜色")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("数组最多可以包含4294967295个项，如果想添加的项数超过这个上限值，就会发生异常，而创建一个初始大小与这个上限值接近的数组，则可能会导致运行时间超长的脚本错误。")])]),s._v(" "),a("h4",{attrs:{id:"检测数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检测数组"}},[s._v("#")]),s._v(" 检测数组")]),s._v(" "),a("p",[s._v("对于一个网页，或者说一个全局作用域而言，instanceof操作符可以确定某个对象是否为数组，但是它的问题在于它假定只有一个全局执行环境，如果网页中包含多个框架，那么实际上就存在两个以上不同的全局执行环境。从而存在两个以上版本不同的Array构造函数。如果你从一个框架向另一个框架传入数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。")]),s._v(" "),a("p",[s._v("为解决这个问题，ECMAScript新增了**Array.isArray()**方法")]),s._v(" "),a("h4",{attrs:{id:"转换方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换方法"}},[s._v("#")]),s._v(" 转换方法")]),s._v(" "),a("p",[s._v("数组继承的toLocalString()、toString()、valueof()方法，在默认情况下都会以逗号分隔的字符串的形式返回数组项。而如果使用join方法，则可以使用不同分隔符来构建这个字符串。join方法只接受一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"red"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"||"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//red||blue")]),s._v("\n默认是逗号作为分隔符\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"栈方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈方法"}},[s._v("#")]),s._v(" 栈方法")]),s._v(" "),a("p",[s._v("push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。而pop()方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。")]),s._v(" "),a("h4",{attrs:{id:"队列方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列方法"}},[s._v("#")]),s._v(" 队列方法")]),s._v(" "),a("p",[s._v("结合使用shift()和push()方法，可以像使用队列一样使用数组。")]),s._v(" "),a("p",[s._v("**shift ()**方法可以移除数组中的第一个项，同时将数组长度减一。")]),s._v(" "),a("p",[s._v("ECMAScript还为数组提供了一个unshift()方法，它能在数组前端任意个项并返回新数组的长度。因此用unshift()方法和pop()方法，可以从相反的方向来模拟队列，即在数组的前端添加项，从数组末端移除项。")]),s._v(" "),a("h4",{attrs:{id:"重排序方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重排序方法"}},[s._v("#")]),s._v(" 重排序方法")]),s._v(" "),a("ul",[a("li",[s._v("reverse()：反转数组项的顺序。")]),s._v(" "),a("li",[s._v("sort()：按升序排列数组项——即最小的值位于最前面，最大的值在最后面。为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到字符串，以确定如何排序。即使数组中的每一项都是数组，sort()方法比较的也是字符串。")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" values "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nvalues"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//0,1,10,15,5")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值前面。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("value2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        renturn "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" values "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nvalues"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("compare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//0,1,5,10,15")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("blockquote",[a("p",[s._v("对于数值类型或者其valueof方法会返回数值类型的对象类型，可以使用一个简单的比较函数，这个函数只要用第二个值减去第一个值即可。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("value2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("h4",{attrs:{id:"操作方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作方法"}},[s._v("#")]),s._v(" 操作方法")]),s._v(" "),a("p",[s._v("ECMAScript为操作已经包含在数组中的项提供了很多方法。其中"),a("strong",[s._v("concat()方法")]),s._v("可以基于当前数组中的所有项创建一个新数组。具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"red"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" color2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yellow"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"black"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("color2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// red,blue,yellow,black")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("slice() 方法")]),s._v("能够基于当前数组中的一个或多个项创建一个新数组，slice方法可以接受一至两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice（）方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。")]),s._v(" "),a("h5",{attrs:{id:"splice-方法的用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splice-方法的用途"}},[s._v("#")]),s._v(" splice()方法的用途")]),s._v(" "),a("ul",[a("li",[s._v("删除：可以删除任意数量的项。例如splice(0,2)会删除数组中的前两项。")]),s._v(" "),a("li",[s._v('插入：可以向指定位置插入任意数量的项，需提供三个参数：起始位置， 0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入第四、第五、任意更多个项。例如splice(2,0,"red")')]),s._v(" "),a("li",[s._v('替换：可以向指定位置插入任意数量的项，同时删除任意数量的项，只需要提供三个参数：起始位置， n（要删除的项数）和要插入的项。例如splice(2,1,"red")')])]),s._v(" "),a("p",[s._v("splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除项，则返回一个空数组）")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" color "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'red'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'blue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'yellow'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" removed "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ncolor"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("yellow\nremoved"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("red\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"位置方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置方法"}},[s._v("#")]),s._v(" 位置方法")]),s._v(" "),a("p",[s._v("ECMAScript5为数组实例添加了两个位置方法，"),a("strong",[s._v("indexOf()"),a("strong",[s._v("和")]),s._v("lastIndexOf()")]),s._v("。这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中，indexOf()方法从数组的开头（位置0）开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找。")]),s._v(" "),a("p",[s._v("这两个方法都返回要查找的项在数组中的位置，或在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。")]),s._v(" "),a("h4",{attrs:{id:"迭代方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代方法"}},[s._v("#")]),s._v(" 迭代方法")]),s._v(" "),a("p",[s._v("每个方法都接收两个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象——影响this的值。传入这些方法中函数会接受收三个参数：数组项的值，该项在数组中的位置和数组对象本身。")]),s._v(" "),a("ul",[a("li",[s._v("every()：如果每一项都返回true,则返回true")]),s._v(" "),a("li",[s._v("filter()：返回该函数会返回ture的项组成的数据")]),s._v(" "),a("li",[s._v("forEach()：没有返回值")]),s._v(" "),a("li",[s._v("map()：返回每次函数调用的结果组成的数组")]),s._v(" "),a("li",[s._v("some()：如果对任意一项结果返回true，则返回true。")])]),s._v(" "),a("h4",{attrs:{id:"归并方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并方法"}},[s._v("#")]),s._v(" 归并方法")]),s._v(" "),a("p",[a("strong",[s._v("reduce()"),a("strong",[s._v("和")]),s._v("reduceRight()")]),s._v("，这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。")]),s._v(" "),a("p",[s._v("这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给方法的函数接收四个参数：前一个值，当前值，项的索引和数组对象。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" values "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" prev"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("cur\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//15")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"date类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date类型"}},[s._v("#")]),s._v(" Date类型")]),s._v(" "),a("p",[s._v("Date类型使用UTC(Coordinated Universal Time，国际协调时间)1970年1月1日午夜（零时）开始经过的毫秒数来保存日期。")]),s._v(" "),a("p",[s._v("要创建一个日期对象，使用new操作符和Date构造函数即可")]),s._v(" "),a("p",[s._v("var now = new Date()")]),s._v(" "),a("h4",{attrs:{id:"date-parse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-parse"}},[s._v("#")]),s._v(" Date.parse()")]),s._v(" "),a("p",[s._v("如果传入Date.parse()方法的字符串不能表示日期，那么他会返回NaN。如果直接将表述日期的字符串传递到Date构造函数，也会在后台调用Date.parse()。")]),s._v(" "),a("h4",{attrs:{id:"date-utc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-utc"}},[s._v("#")]),s._v(" Date.UTC()")]),s._v(" "),a("p",[s._v("四个参数中只有年和月是必须的。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" allFives "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),s._v("（Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UTC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2005")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("55")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("55")]),s._v("）\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//GMT时间 2005年5月5日下午5:55:55")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("Date构造函数会模仿Date.UTC（），但是日期和时间会基于本地时区而非GMT来创建。")]),s._v(" "),a("blockquote",[a("p",[a("em",[s._v("GMT")]),s._v("一般指世界时。世界时UT即格林尼治平太阳时间，是指格林尼治所在地的标准时间，也是表示地球自转速率的一种形式。")])]),s._v(" "),a("h4",{attrs:{id:"date-now"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-now"}},[s._v("#")]),s._v(" Date.now()")]),s._v(" "),a("p",[s._v("返回表示调用这个方法时的日期和时间的毫秒数。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" stop "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" stop "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" start\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"继承的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承的方法"}},[s._v("#")]),s._v(" 继承的方法")]),s._v(" "),a("p",[s._v("Date类型的toLocalleString()方法会按照浏览器设置的地区相适应的格式返回日期和时间。")]),s._v(" "),a("h4",{attrs:{id:"日期格式化方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期格式化方法"}},[s._v("#")]),s._v(" 日期格式化方法")]),s._v(" "),a("p",[s._v("Date类型还有一些专门用于将日期格式化为字符串的方法")]),s._v(" "),a("ul",[a("li",[s._v("toDateString（）——以特定于时间的格式显示星期几、月、日和年")]),s._v(" "),a("li",[s._v("toLocaleDateString（）——以特定于地区的格式显示星期几、月、日和年")])]),s._v(" "),a("h4",{attrs:{id:"日期-时间组件方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期-时间组件方法"}},[s._v("#")]),s._v(" 日期/时间组件方法")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("getTime()")]),s._v("\n返回表示日期的毫秒数；与valueOf()方法返回的值相同\n"),a("strong",[s._v("setTime(毫秒)")]),s._v("\n以毫秒数设置日期，会改变整个日期\n"),a("strong",[s._v("getFullYear()")]),s._v("\n取得4位数的年份（如2007而非仅07）\n"),a("strong",[s._v("getUTCFullYear()")]),s._v("\n返回UTC日期的4位数年份\n"),a("strong",[s._v("setFullYear(年)")]),s._v("\n设置日期的年份。传入的年份值必须是4位数字（如2007而非仅07） "),a("strong",[s._v("setUTCFullYear(年)")]),s._v("\n设置UTC日期的年份。传入的年份值必须是4位数字（如2007而非仅07）\n"),a("strong",[s._v("getMonth()")]),s._v("\n返回日期中的月份，其中0表示一月，11表示十二月\n"),a("strong",[s._v("getUTCMonth()")]),s._v("\n返回UTC日期中的月份，其中0表示一月，11表示十二月\n"),a("strong",[s._v("setMonth(月)")]),s._v("\n设置日期的月份。传入的月份值必须大于0，超过11则增加年份\n"),a("strong",[s._v("setUTCMonth(月)")]),s._v("\n设置UTC日期的月份。传入的月份值必须大于0，超过11则增加年份\n"),a("strong",[s._v("getDate()")]),s._v("\n返回日期月份中的天数（1到31）\n"),a("strong",[s._v("getUTCDate()")]),s._v("\n返回UTC日期月份中的天数（1到31）\n"),a("strong",[s._v("setDate(日)")]),s._v("\n设置日期月份中的天数。如果传入的值超过了该月中应有的天数，则增加月份 "),a("strong",[s._v("setUTCDate(日)")]),s._v("\n设置UTC日期月份中的天数。如果传入的值超过了该月中应有的天数，则增加月份\n"),a("strong",[s._v("getDay()")]),s._v("\n返回日期中星期的星期几（其中0表示星期日，6表示星期六）\n"),a("strong",[s._v("getUTCDay()")]),s._v("\n返回UTC日期中星期的星期几（其中0表示星期日，6表示星期六）\n"),a("strong",[s._v("getHours()")]),s._v("\n返回日期中的小时数（0到23）\n"),a("strong",[s._v("getUTCHours()")]),s._v("\n返回UTC日期中的小时数（0到23）\n"),a("strong",[s._v("setHours(时)")]),s._v("\n设置日期中的小时数。传入的值超过了23则增加月份中的天数\n"),a("strong",[s._v("setUTCHours(时)")]),s._v("\n设置UTC日期中的小时数。传入的值超过了23则增加月份中的天数\n"),a("strong",[s._v("getMinutes()")]),s._v("\n返回日期中的分钟数（0到59）\n"),a("strong",[s._v("getUTCMinutes()")]),s._v("\n返回UTC日期中的分钟数（0到59）\n"),a("strong",[s._v("setMinutes(分)")]),s._v("\n设置日期中的分钟数。传入的值超过59则增加小时数\n"),a("strong",[s._v("setUTCMinutes(分)")]),s._v("\n设置UTC日期中的分钟数。传入的值超过59则增加小时数\n"),a("strong",[s._v("getSeconds()")]),s._v("\n返回日期中的秒数（0到59）\n"),a("strong",[s._v("getUTCSeconds()")]),s._v("\n返回UTC日期中的秒数（0到59）\n"),a("strong",[s._v("setSeconds(秒)")]),s._v("\n设置日期中的秒数。传入的值超过了59会增加分钟数\n"),a("strong",[s._v("setUTCSeconds(秒)")]),s._v("\n设置UTC日期中的秒数。传入的值超过了59会增加分钟数\n"),a("strong",[s._v("getMilliseconds()")]),s._v("\n返回日期中的毫秒数\n"),a("strong",[s._v("getUTCMilliseconds()")]),s._v("\n返回UTC日期中的毫秒数\n"),a("strong",[s._v("setMilliseconds(毫秒)")]),s._v("\n设置日期中的毫秒数\n"),a("strong",[s._v("setUTCMilliseconds(毫秒)")]),s._v("\n设置UTC日期中的毫秒数\n"),a("strong",[s._v("getTimezoneOffset()")]),s._v("\n返回本地时间与UTC时间相差的分钟数。例如，美国东部标准时间返回300。在某 地进入夏令时的情况下，这个值会有所变化")])]),s._v(" "),a("h3",{attrs:{id:"regexp类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp类型"}},[s._v("#")]),s._v(" RegExp类型")]),s._v(" "),a("p",[s._v("创建一个正则表达式")]),s._v(" "),a("p",[s._v("var expression = / pattern /flags")]),s._v(" "),a("p",[s._v("其中pattern部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定类、分组、向前查找以及反向引用。每个正则表达式都可带有一个或多个标志，用以标明正则表达式的行为。")]),s._v(" "),a("ul",[a("li",[s._v("ｇ：表示全局,即模式将被应用于所有字符串")]),s._v(" "),a("li",[s._v("ｉ：表示不区分大小写")]),s._v(" "),a("li",[s._v("ｍ：表示多行")])]),s._v(" "),a("p",[a("strong",[s._v("正则表达式中的元字符包括： （ [ {  \\ ^ $ | ) ? * + . ] }")])]),s._v(" "),a("p",[s._v("除了以字面量形式定义正则表达式外，另一种创建正则表达式的方式是使用RegExp构造函数，它接收两个参数：一个是要匹配的字符串模式，另一个是可选的标志字符串。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[bc]at"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("P105实例，两种方式的区别")])]),s._v(" "),a("h4",{attrs:{id:"regexp实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp实例方法"}},[s._v("#")]),s._v(" RegExp实例方法")]),s._v(" "),a("p",[s._v("主要方法是"),a("strong",[s._v("exec()")]),s._v("，该方法是专门为捕获组设计的。exec()接受一个参数，即要应用模式的字符串，然后返回包含第一个匹配项信息的数组。")]),s._v(" "),a("p",[s._v("在不设置全局标志的情况下，在同一字符串上多次调用exec()将始终返回第一个匹配项的信息，而在设置全局标志的情况下，每次调用exec()都会在字符串中继续查找新的匹配项。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var text = "mom dad"\nvar pattern = /mom(dad ?)/gi\nvar match = pattern.exec(text)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("test()")]),s._v("，它接收一个字符串参数。在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容的情况下，使用这个方法非常方便。")]),s._v(" "),a("h4",{attrs:{id:"模式的局限性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式的局限性"}},[s._v("#")]),s._v(" 模式的局限性")]),s._v(" "),a("p",[s._v("ECMAScript正则表达式不支持的特性：")]),s._v(" "),a("ul",[a("li",[s._v("匹配字符串开始和结尾的\\A和\\Z 锚")]),s._v(" "),a("li",[s._v("向后查找（但完全支持向前查找）")]),s._v(" "),a("li",[s._v("交并集")]),s._v(" "),a("li",[s._v("命名的捕获组")]),s._v(" "),a("li",[s._v("条件匹配")]),s._v(" "),a("li",[s._v("单行和无间隔匹配模式")]),s._v(" "),a("li",[s._v("正则注释")])]),s._v(" "),a("h3",{attrs:{id:"function类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function类型"}},[s._v("#")]),s._v(" Function类型")]),s._v(" "),a("p",[s._v("由于函数是对象，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。")]),s._v(" "),a("h4",{attrs:{id:"没有重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#没有重载"}},[s._v("#")]),s._v(" 没有重载")]),s._v(" "),a("p",[s._v("把函数名想象成指针，有助于理解ECMAScript没有函数重载的概念——在创建第二个函数的时候，实际上覆盖了引用第一个函数的变量。")]),s._v(" "),a("h4",{attrs:{id:"函数声明和函数表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数声明和函数表达式"}},[s._v("#")]),s._v(" 函数声明和函数表达式")]),s._v(" "),a("p",[s._v("解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以执行）")]),s._v(" "),a("h4",{attrs:{id:"作为值的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为值的函数"}},[s._v("#")]),s._v(" 作为值的函数")]),s._v(" "),a("p",[s._v("函数名本身就是变量，所以函数也可以作为值来使用。也就是说可以将一个函数作为另一个函数的结果使用。")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CLENOVO%5CDesktop%5Cweb-learning%5Cavatar.png",alt:""}})])])])}),[],!1,null,null,null);t.default=r.exports}}]);